# docker compose -f docker-compose.yml down -v
# docker compose -f docker-compose.yml up -d --build
# docker compose up --build
# docker exec -it nginx bash
# docker build . -t test
# docker compose exec app_flask python cli.py create_db

version: '3.8'

services:
  database:
    container_name: db_postgres
    image: postgres:15.2-alpine
#    ports:
#      - 5432:5432
    environment:
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "pswd"
      POSTGRES_DB: "test"
#      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
#      - ./data:/var/lib/postgresql/data/pgdata
      - ./data:/var/lib/postgresql/data
      - ./myPostgresql.conf:/var/lib/postgresql/data/postgresql.conf
      - ./log:/var/lib/postgresql/data/log
    expose:
      - 5432
    restart: on-failure
    networks:
      my_network:

  flask:
    container_name: app_flask
    build: ./backend
    command: gunicorn --bind 0.0.0.0:5000 app:app
#    command: python app.py run -h 0.0.0.0
    working_dir: /backend
    restart: on-failure
#    ports:
#      - 5000:5000
    expose:
      - 5000
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: database
#      имя контейнера://пользователь:пароль@имя хоста:порт/название базы
    volumes:
      - ./backend/:/backend
    depends_on:
      - database
    networks:
      my_network:
        aliases:
          - flask_app

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 8080:80
    depends_on:
      - flask

    networks:
      my_network:

networks:
  my_network:

